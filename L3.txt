    .equ	LAST_PLACE,	0x007FFFFC
	.equ	JTAG_UART_BASE,	0x10001000	
	.equ	OFFSET_DATA,	0			
	.equ	OFFSET_STATUS,	4			
	.equ	WSPACE_MASK,	0xFFFF	

.text
.global _start
.org 0x00000000
	
_start:
    
	movia	sp, LAST_PLACE

    movia r2,Lab3
    call PrintString
	
	movia	r2, List1
	
	movi    r3,N
	andi    r3,r3,0xF
	call	ShowByteList
	call CondZeroByteList
	call	ShowByteList

_end:
	br		_end		
	
#==============================================================================
# Subroutine PrintChar

PrintChar:
	subi	sp, sp, 8	
	stw		r3, 4(sp)	
	stw		r4, 0(sp)	
	
	movia	r3, JTAG_UART_BASE	
	
	ldwio	r4, 4(r3)			
	stwio	r2, 0(r3)		
	
	ldw		r3, 4(sp)
	ldw		r4, 0(sp)
	addi	sp, sp, 8	
	ret					

#==============================================================================
# Subroutine PrintString

PrintString:
	subi	sp, sp, 12
	stw		ra, 8(sp)	
	stw		r2, 4(sp)	
	stw		r3, 0(sp)	
	
	
	mov r3,r2
loop:
	ldb     r2, 0(r3)		
	beq		r2, r0, done	
	call	PrintChar		
	addi	r3, r3, 1		
	br		loop			
done:
	
	movi	r2, '\n'		
	call	PrintChar
	ldw		ra, 8(sp) 	
	ldw		r2, 4(sp)
	ldw     r3, 0(sp)
	addi	sp, sp, 12
	
	ret						

#==============================================================================
# PrintHexDigit Subroutine 

PrintHexDigit:

    subi sp,sp,16
	stw	ra, 12(sp)	
	stw r2,8(sp)
	stw r3,4(sp)
	stw r4,0(sp)
	
phd_if:
   
    movi r3,10
	bge r2,r3,phd_else

then:
   
    addi r2,r2,'0'
	br phd_end_if

phd_else:
  
    subi r2,r2,10
	addi r2,r2,'A'

phd_end_if:

    call PrintChar
	
	ldw	ra, 12(sp)
	ldw r2,8(sp)
	ldw r3,4(sp)
	ldw r4,0(sp)
	addi sp,sp,16
	
	ret

#==============================================================================
# PrintHexByte Subroutine 

PrintHexByte:

    subi sp,sp,12
	stw ra,8(sp)
	stw r2,4(sp)
	stw r3,0(sp)
	
	mov r3,r2
	srli r2,r3,4
	call PrintHexDigit
	
	andi r2,r3,0xF
	call PrintHexDigit
	
	ldw ra,8(sp)
	ldw r2,4(sp)
	ldw r3,0(sp)
	addi sp,sp,12
	
	ret
#==============================================================================
# PrintHexWord Subroutine 

PrintHexWord:

    subi sp,sp,12
	stw ra,8(sp)
	stw r2,4(sp)
	stw r3,0(sp)
	
	mov r3,r2
	
	srli r2,r3,24
	call PrintHexByte
	
	srli r2,r3,16
	andi r2,r2,0xFF
	call PrintHexByte
	
	srli r2,r3,8
	andi r2,r2,0xFF
	call PrintHexByte
	
	andi r2,r3,0xFF
	call PrintHexByte
	
	ldw ra,8(sp)
	ldw r2,4(sp)
	ldw r3,0(sp)
	addi sp,sp,12
	
	ret
#==============================================================================
#ShowByteList
ShowByteList:

    subi sp,sp,20
	stw ra,16(sp)
	stw r2,12(sp)
	stw r3,8(sp)
	stw r4,4(sp)
	stw r5,0(sp)

    mov r4,r2
	
	SBLloop:
	ldw r2,Open(r0)
	call PrintChar
	ldbu r2,0(r4)
	beq r2,r0,SBLif
	call PrintHexDigit
	br SBLCheck
	
	SBLif:
	
	ldw r2,Dash(r0)
	call PrintChar
	call PrintChar
	
	SBLCheck:
	
	addi r4,r4,1
	subi r3,r3,1
	ldw r2,Close(r0)
	call PrintChar
	ldw r2,Space(r0)
	call PrintChar
	bgt r3,r0,SBLloop
	ldw r2,NewLine(r0)
	call PrintChar


	ldw ra,16(sp)
	ldw r2,12(sp)
	ldw r3,8(sp)
	ldw r4,4(sp)
	ldw r5,0(sp)
	addi sp,sp,20
	
	ret
#==============================================================================
#CondZeroByteList

CondZeroByteList:

    subi sp,sp,20
	stw ra,16(sp)
	stw r2,12(sp)
	stw r3,8(sp)
	stw r4,4(sp)
	stw r5,0(sp)

    movi r4,0x7F
	
	CZBloop:
	ldbu r5,0(r2)
	ble  r5,r4,CZBCheck
	stb  r0,0(r2)

	CZBCheck:
	
	addi r2,r2,1
	subi r3,r3,1
	bgt r3,r0,CZBloop

	ldw ra,16(sp)
	ldw r2,12(sp)
	ldw r3,8(sp)
	ldw r4,4(sp)
	ldw r5,0(sp)
	addi sp,sp,20
	
	ret





#==============================================================================

#Where it goes to in memory
.org	0x00001000	

List1: .byte 0xFFFFFFFF,0,244,117
N: .word 4
Dash: .word '-'
Open: .word '('
Close: .word ')'
Space: .word ' '
NewLine: .word '\n'
Lab3: .asciz "Lab 3\n"